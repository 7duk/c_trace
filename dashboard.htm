<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="./utils.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-color: #0d6efd;
            --hover-color: #0b5ed7;
            --text-primary: #212529;
            --text-secondary: #6c757d;
            --border-color: #dee2e6;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --border-radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        .container {
            padding: 20px;
            background: #f5f6fa;
            min-height: 100vh;
            max-width: 100%;
            overflow-x: hidden;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .card h3 {
            color: #666;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .card .number {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }

        .data-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container,
        .table-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            height: 600px;
            width: 100%;
            overflow: hidden;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .time-filters {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .filter-btn:hover {
            background: #f5f5f5;
        }

        .filter-btn.active {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

        .table-container {
            overflow-y: auto;
            max-width: 100%;
        }

        .chart-scroll-container {
            width: 100%;
            overflow-x: auto;
            padding-bottom: 15px;
        }

        .chart-wrapper {
            height: 500px;
            width: 100%;
            min-width: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
        }

        th,
        td {
            padding: 16px;
            text-align: left;
            border-bottom: 1px solid #eaeaea;
            font-size: 14px;
            color: #444;
            white-space: nowrap;
        }

        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        td.request-id {
            position: relative;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
            cursor: pointer;
        }

        td.request-id:hover::after {
            content: attr(data-full-text);
            position: absolute;
            background-color: rgba(0, 0, 0, 0.75);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            top: 50%;
            left: 105%;
            transform: translateY(-50%);
            white-space: normal;
            z-index: 10;
            box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
            max-width: 300px;
        }

        td.request-id:hover {
            overflow: visible;
        }

        tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        tr:nth-child(even) {
            background-color: #ffffff;
        }

        tr:hover {
            background-color: #e3f2fd;
            cursor: pointer;
        }

        .status {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 12px;
            text-transform: capitalize;
            font-weight: bold;
        }

        .status.completed {
            background-color: #d4edda;
            color: #155724;
        }

        .status.pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status.failed {
            background-color: #f8d7da;
            color: #721c24;
        }

        .status.accept {
            background-color: #cce5ff;
            color: #004085;
        }

        @media (max-width: 768px) {
            th,
            td {
                padding: 12px;
                font-size: 12px;
            }
        }

        @media (max-width: 1200px) {
            .data-container {
                grid-template-columns: 1fr;
            }

            .chart-container,
            .table-container {
                height: auto;
                min-height: 400px;
            }
        }

        @media (max-width: 768px) {
            .cards-container {
                grid-template-columns: 1fr;
            }

            .time-filters {
                flex-wrap: wrap;
            }

            .filter-btn {
                flex: 1;
                min-width: 100px;
            }
        }

        .user-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn-logout {
            background: var(--accent-color);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.2s;
        }

        .btn-logout:hover {
            background: var(--hover-color);
            color: white;
        }

        .btn-back {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-back:hover {
            color: #2980b9;
        }

        .btn-icon {
            background: none;
            border: none;
            color: var(--accent-color);
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-icon:hover {
            color: var(--hover-color);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <button class="btn-back" onclick="goBack()">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <h1>Dashboard</h1>
            </div>
            <div class="user-controls">
                <div class="btn-icon" title="Username">
                    <i class="fa-solid fa-user"></i>
                    <span class="username" id="currentUser" onclick="handleProfile()"></span>
                </div>
                <button class="btn-logout" onclick="handleLogout()">Logout</button>
            </div>
        </div>

        <div class="cards-container">
            <div class="card">
                <h3>Total Users</h3>
                <div class="number" id="total_users">0</div>
            </div>
            <div class="card">
                <h3>Total Requests</h3>
                <div class="number" id="total_requests">0</div>
            </div>
        </div>

        <div class="data-container">
            <div class="chart-container">
                <div class="chart-header">
                    <h3>Requests Statistics</h3>
                    <div class="time-filters">
                        <button class="filter-btn active" data-period="14days">14 Days</button>
                        <button class="filter-btn" data-period="month">Month</button>
                        <button class="filter-btn" data-period="year">Year</button>
                    </div>
                </div>
                <div class="chart-scroll-container">
                    <div class="chart-wrapper">
                        <canvas id="requestsChart"></canvas>
                    </div>
                </div>
            </div>

            <div class="table-container">
                <h3>Recent Requests</h3>
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>User</th>
                            <th>Request ID</th>
                            <th>Status</th>
                            <th>Timestamp</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTable">
                    </tbody>
                </table>
                <div id="loadingIndicator" style="display: none; text-align: center; padding: 1rem;">
                    <span>Loading...</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        function handleProfile() {
            window.location.href = './profile.htm';
        }

        function checkAuth() {
            const token = localStorage.getItem('access_token');
            const userRole = localStorage.getItem('role');
            if (!token) {
                window.location.href = './index.htm';
            }

            const fullname = localStorage.getItem('fullname');
            document.getElementById('currentUser').textContent = fullname;
        }

        async function handleLogout() {
            const userId = localStorage.getItem('user_id');
            try {
                const response = await fetch('./config/config.json');
                const config = await response.json();
                let requestUrl = `http://${config.ip}:8081/api/v1/auth/logout?userId=${userId}`;
                const result = await axios.get(requestUrl);
                if (result.data.status === '200') {
                    localStorage.removeItem('access_token');
                    destroyCookie('refreshToken');
                    localStorage.removeItem('fullname');
                    localStorage.removeItem('user_id');
                    localStorage.removeItem('role');
                    localStorage.removeItem('mail');
                    localStorage.removeItem('username');
                    localStorage.removeItem('created_at');
                }
                checkAuth();
            }
            catch (error) {
                console.error('Error fetching data:', error);
                return null;
            }
        }

        function goBack() {
            window.location.href = './index.htm';
        }

        document.addEventListener('DOMContentLoaded', checkAuth);

        const wsUrl = `ws://localhost:8081/handler?view=metrics`;
        console.log("Connecting to WebSocket:", wsUrl);
        const socket = new WebSocket(wsUrl);

        socket.onopen = function () {
            console.log("WebSocket connection established!");
        };

        socket.onmessage = function (event) {
            try {
                const parsedData = JSON.parse(event.data);
                document.getElementById("total_requests").innerHTML = parsedData.metrics.totalRequests;
                document.getElementById("total_users").innerHTML = parsedData.metrics.totalUsers;
                console.log('Total Users:', parsedData.metrics.totalUsers);
                console.log('Total Requests:', parsedData.metrics.totalRequests);
            } catch (error) {
                console.error("Error parsing message data:", error);
            }
        };

        socket.onclose = function () {
            console.log("WebSocket connection closed!");
        };

        socket.onerror = function (error) {
            console.error("WebSocket error:", error);
        };

        let chart;
        async function generateTimeData(period) {
            const response = await fetch('./config/config.json');
            const config = await response.json();
            let requestUrl = `http://${config.ip}:8081/api/v1/statistical`;
            const accessToken = localStorage.getItem('access_token');
            const headers = {
                'Authorization': `Bearer ${accessToken}`
            }
            switch (period) {
                case '14days':
                    requestUrl = requestUrl + "?stype=_fourteen"
                    break;
                case 'month':
                    requestUrl = requestUrl + "?stype=_month"
                    break;
                case 'year':
                    requestUrl = requestUrl + "?stype=_year"
                    break;
            }
            try {
                const result = await axios.get(requestUrl, { headers });
                return result.data;
            } catch (error) {
                console.error('Error fetching data:', error);
                return null;
            }
        }

        async function initChart(period = '14days') {
            const staticticalData = await generateTimeData(period);
            const dates = staticticalData.map(item => {
                if (period === 'year') {
                    return item.xaxis;
                }
                else {
                    const date = new Date(item.xaxis);
                    return date.toLocaleDateString();
                }

            });
            const data = staticticalData.map(item => item.yaxis);
            const ctx = document.getElementById('requestsChart').getContext('2d');

            if (chart) {
                chart.destroy();
            }

            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Requests',
                        data: data,
                        borderColor: '#3498db',
                        tension: 0.3,
                        fill: false,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Requests'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            },
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
        }

        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                initChart(e.target.dataset.period);
            });
        });

        let currentPage = 0;
        const pageSize = 10;
        let isLoading = false;
        let hasMoreData = true;

        async function fetchPageData(page, size) {
            const response = await fetch('./config/config.json');
            const config = await response.json();
            const accessToken = localStorage.getItem('access_token');
            const userId = localStorage.getItem('user_id');
            const url = `http://${config.ip}:8081/api/v1/requests/info?page=${page}&limit=${size}&userId=${userId}`;
            try {
                const result = await axios.get(url, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                    }
                });
                return result.data.content;
            } catch (error) {
                console.error('Error fetching page data:', error);
                return [];
            }
        }

        async function loadNextPage() {
            if (isLoading || !hasMoreData) return;

            isLoading = true;
            document.getElementById('loadingIndicator').style.display = 'block';

            const data = await fetchPageData(currentPage, pageSize);

            if (!Array.isArray(data) || data.length === 0) {
                hasMoreData = false;
            } else {
                populateTable(data);
                currentPage++;
            }

            isLoading = false;
            document.getElementById('loadingIndicator').style.display = 'none';
        }

        function populateTable(data) {
            if (!Array.isArray(data)) {
                console.log('Expected an array but received:', data);
                return;
            }
            const tableBody = document.getElementById('requestsTable');

            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.addEventListener('click', () => {
                    window.open(`/result.htm?requestID=${row.requestID}`, '_blank');
                });
                tr.innerHTML = `
                <td>${row.id}</td>
                <td>${row.userID || 'N/A'}</td>
                <td class="request-id" data-full-text="${row.requestID || 'N/A'}">
                    ${row.requestID ? row.requestID.slice(0, 10) + '...' : 'N/A'}
                </td>
                <td><span class="status ${row.status.toLowerCase()}">${row.status}</span></td>
                <td>${new Date(row.updatedAt).toLocaleString() || 'N/A'}</td>
            `;
            tableBody.appendChild(tr);
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        loadNextPage();
        const tableContainer = document.querySelector('.table-container');
        tableContainer.addEventListener('scroll', () => {
            if (tableContainer.scrollTop + tableContainer.clientHeight >= tableContainer.scrollHeight - 10) {
                loadNextPage();
            }
        });
    });
</script>
</body>

</html>
