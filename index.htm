<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>File Upload with Hover</title>
  <link rel="stylesheet" href="style.css">
</head>

<body>
  <div class="container">
    <div class="command">
      <table>
        <tbody>
          <tr>
            <td>Command:</td>
            <td>
              <input type="text" id="command_text">
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="card">
      <h3>Upload Files</h3>
      <div class="drop_box">
        <header>
          <h4>Select file here or drag and drop</h4>
        </header>
        <input type="file" id="fileID" hidden>
        <button class="btn">Choose File</button>
      </div>
      <progress id="progressBar" value="0" max="100" style="width:300px;"></progress>
      <h3 id="status"></h3>
      <p id="loaded_n_total"></p>
    </div>
  </div>

  <script>
    const dropArea = document.querySelector(".drop_box");
    const button = dropArea.querySelector("button");
    const input = dropArea.querySelector("input");

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropArea.addEventListener(eventName, preventDefaults, false);
      document.body.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    button.onclick = (event) => {
      event.preventDefault();
      input.click();
    };

    dropArea.addEventListener("dragenter", (event) => {
      preventDefaults(event);
      dropArea.classList.add("active");
    });

    dropArea.addEventListener("dragover", (event) => {
      preventDefaults(event); // Ngăn chặn hành vi mặc định để cho phép thả
      dropArea.classList.add("active"); // Có thể thêm class để thay đổi kiểu dáng khi đang kéo
    });

    dropArea.addEventListener("dragleave", () => {
      preventDefaults(event);
      if (!dropArea.contains(event.relatedTarget)) {
        dropArea.classList.remove("active");
      } // Xóa class khi không còn kéo trên khu vực
    });

    dropArea.addEventListener("drop", (event) => {
      event.preventDefault();
      dropArea.classList.remove("active"); // Xóa class khi thả

      const files = event.dataTransfer.files; // Lấy file từ sự kiện thả
      if (files.length) {
        input.files = files; // Gán file vào input
        handleFiles(files); // Gọi hàm xử lý file
      }
    });

    function handleFiles(files) {
      const file = files[0];
      if (file) {
        const fileName = file.name;
        const shortFileName = fileName.length > 20 ?
          fileName.substring(0, 20) + "..." :
          fileName;
        const filedata = `
                    <div class="file-info">
                        <span class="file-name" data-fullname="${fileName}">${shortFileName}</span>
                        <button type="button" class="btn" onclick="uploadFile()">Upload</button>
                    </div>`;
        dropArea.innerHTML = filedata;
      }
    }

    input.addEventListener("change", function (e) {
      const files = e.target.files;
      if (files.length) {
        handleFiles(files);
      }
    });

    function uploadFile() {
      let formData = new FormData();
      let file = input.files[0];
      if (!file) return;
      const commandText = _("command_text");
      if (!commandText) {
        return;
      } else {
        const command = commandText.value;
        if (!command) {
          alert("Command text must be not null!")
          return;
        }
        else {
          formData.append("command", command);
        }
      }
      formData.append("file", file);
      var ajax = new XMLHttpRequest();
      ajax.upload.addEventListener("progress", progressHandler, false);
      ajax.addEventListener("load", completeHandler, false);
      ajax.addEventListener("error", errorHandler, false);
      ajax.addEventListener("abort", abortHandler, false);
      ajax.open("POST", "http://192.168.4.11:8080/api/v1/upload");
      ajax.send(formData);
    }

    function _(id) {
      return document.getElementById(id);
    }

    function progressHandler(event) {
      var percent = (event.loaded / event.total) * 100;
      _("progressBar").value = Math.round(percent);
      _("status").innerHTML = Math.round(percent) + "% uploaded... please wait";
      _("loaded_n_total").innerHTML = "Uploaded " + event.loaded + " of " + event.total + " bytes";
    }

    function completeHandler(event) {
      _("status").innerHTML = event.target.responseText;
    }

    function errorHandler() {
      _("status").innerHTML = "Upload Failed";
    }

    function abortHandler() {
      _("status").innerHTML = "Upload Aborted";
    }
  </script>
</body>

</html>