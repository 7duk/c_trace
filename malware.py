import requests
import json
import os

# Thông tin API Key (điền API key của bạn nếu cần)


# URL API của Malware Bazaar
API_URL = "https://mb-api.abuse.ch/api/v1/"
# API_KEY = "your_api_key_here"  # Thay thế bằng API Key của bạn
list_file_type = ['exe', 'csv', 'pdf', 'doc', 'docx', 'xlsx', 'js', 'sh', 'py', 'jar']

def fetch_hashes_by_filetype(file_type):
    """
    Lấy danh sách mã hash và tên file từ Malware Bazaar.
    
    Args:
        file_type (str): Loại file (ví dụ: "exe", "dll", "doc", v.v.)
    
    Returns:
        dict: Dictionary với sha256_hash là key và file_name là value.
    """
    payload = {
        "query": "get_file_type",
        "file_type": file_type,
        "limit": 50
    }

    headers = {
        "API-KEY": API_KEY  # API Key, cần thêm nếu yêu cầu
    }

    try:
        # Gửi yêu cầu POST tới API
        response = requests.post(API_URL, data=payload, headers=headers)
        response.raise_for_status()  # Kiểm tra lỗi HTTP
        data = response.json()

        # Kiểm tra trạng thái trả về
        if data.get("query_status") == "ok":
            # Tạo dict với sha256_hash là key và file_name là value
            hashes = {sample.get("sha256_hash"): sample.get("file_name") for sample in data.get("data", [])}
            return hashes
        else:
            print(f"API Error: {data.get('query_status')}")
            return {}
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return {}

def download_file_by_hash(file_hash, file_name, save_path):
    """
    Tải tệp tin từ Malware Bazaar theo mã hash.
    
    Args:
        file_hash (str): Mã hash của file cần tải.
        file_name (str): Tên file của file cần tải.
        save_path (str): Đường dẫn lưu tệp tin sau khi tải về.
    
    Returns:
        bool: Trả về True nếu tải thành công, False nếu thất bại.
    """
    payload = {
        "query": "get_file",
        "sha256_hash": file_hash
    }

    headers = {
        "API-KEY": API_KEY  # Thêm API Key nếu cần
    }

    try:
        # Gửi yêu cầu POST để tải file
        response = requests.post(API_URL, data=payload, headers=headers)
        response.raise_for_status()  # Kiểm tra lỗi HTTP
        
        # Kiểm tra nếu API trả về dữ liệu tệp tin
        if response.status_code == 200:
            # Lưu tệp tin vào đường dẫn với tên tương ứng
            save_file_path = f"{save_path}/{file_name}"
            with open(save_file_path, 'wb') as f:
                f.write(response.content)  # Lưu tệp tin vào đường dẫn đã chỉ định
            print(f"File downloaded: {save_file_path}")
            return True
        else:
            print(f"Failed to download file with hash {file_hash}.")
            return False
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return False

hashes = []
file_dict = {}
errors = []
def create_directory(directory_path):
    """
    Kiểm tra và tạo thư mục nếu chưa tồn tại.
    
    Args:
        directory_path (str): Đường dẫn thư mục cần tạo.
    """
    if not os.path.exists(directory_path):
        os.makedirs(directory_path)  # Tạo thư mục nếu chưa tồn tại

# Ví dụ: Lấy mã hash của file có định dạng từ danh sách 'exe', 'pdf', ...
save_path = "downloads/malware" 
create_directory(save_path)
for file_type in list_file_type:
    hashes_temp = fetch_hashes_by_filetype(file_type)

    if hashes_temp:
        print(f"Found {len(hashes_temp)} hashes for file type '{file_type}':")
        file_dict[file_type] = len(hashes_temp)
        for h, f in hashes_temp.items():
            hashes.append(h)
            print(f"Hash: {h}, File: {f}")
            
            # Tải file với tên tương ứng
             # Thư mục lưu file
             # Tạo thư mục nếu chưa tồn tại
             try:
                download_file_by_hash(h, f, save_path)
            except Exception as e:
                print(f"Error downloading file: {e}")
                errors.append(h)
    else:
        print(f"No hashes found or an error occurred for file type '{file_type}'.")
    print("--------------------------------------------------------")

print(f"Size of hashes: {len(hashes)}")
print(f"File types and their hash counts: {file_dict}")
print(f"Size of errors status when downloading file: {len(errors)}")



