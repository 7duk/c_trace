<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
    <script src="./service/utils.js"></script>
    <script src="./service/apiService.js"></script>
    <script src="./service/dialog.js"></script>
    <!-- <link rel="import" href="../view/custom-dialog.htm"> -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-color: #0d6efd;
            --hover-color: #0b5ed7;
            --text-primary: #212529;
            --text-secondary: #6c757d;
            --border-color: #dee2e6;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --border-radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        .container {
            padding: 20px;
            background: #f5f6fa;
            min-height: 100vh;
            max-width: 100%;
            overflow-x: hidden;
        }

        .header {
            margin-bottom: 30px;
        }

        .cards-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card h3 {
            color: #666;
            margin-bottom: 10px;
            font-size: 16px;
        }

        .card .number {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }

        .data-container {
            display: grid;
            grid-template-columns: 1.5fr 2fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        .chart-container,
        .table-container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            height: 600px;
            width: 100%;
            overflow: hidden;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .time-filters {
            display: flex;
            gap: 10px;
        }

        .filter-btn {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .filter-btn:hover {
            background: #f5f5f5;
        }

        .filter-btn.active {
            background: #3498db;
            color: white;
            border-color: #3498db;
        }

        .table-container {
            overflow-y: auto;
            max-width: 100%;
        }

        .chart-scroll-container {
            width: 100%;
            overflow-x: auto;
            padding-bottom: 15px;
        }

        .chart-wrapper {
            height: 500px;
            width: 100%;
            min-width: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
        }

        th,
        td {
            padding: 16px;
            text-align: left;
            border-bottom: 1px solid #eaeaea;
            font-size: 14px;
            color: #444;
            white-space: nowrap;
        }

        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        td.request-id {
            position: relative;
            white-space: nowrap;
            /* Ngăn xuống dòng */
            overflow: hidden;
            /* Ẩn nội dung tràn */
            text-overflow: ellipsis;
            /* Hiển thị dấu ... nếu quá dài */
            max-width: 150px;
            /* Giới hạn chiều rộng */
            cursor: pointer;
            /* Hiển thị con trỏ khi hover */
        }

        td.request-id:hover::after {
            content: attr(data-full-text);
            /* Hiển thị nội dung đầy đủ */
            position: absolute;
            background-color: rgba(0, 0, 0, 0.75);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            top: 50%;
            left: 105%;
            transform: translateY(-50%);
            white-space: normal;
            z-index: 10;
            box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
            max-width: 300px;
            /* Giới hạn chiều rộng của tooltip */
        }

        td.request-id:hover {
            overflow: visible;
            /* Hiển thị tooltip */
        }


        tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        tr:nth-child(even) {
            background-color: #ffffff;
        }

        tr:hover {
            background-color: #e3f2fd;
            cursor: pointer;
        }

        .status {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 4px;
            font-size: 12px;
            text-transform: capitalize;
            font-weight: bold;
        }

        .status.completed {
            background-color: #d4edda;
            color: #155724;
        }

        .status.pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status.failed {
            background-color: #f8d7da;
            color: #721c24;
        }

        .status.accept {
            background-color: #cce5ff;
            color: #004085;
        }

        @media (max-width: 768px) {

            th,
            td {
                padding: 12px;
                font-size: 12px;
            }
        }


        @media (max-width: 1200px) {
            .data-container {
                grid-template-columns: 1fr;
            }

            .chart-container,
            .table-container {
                height: auto;
                min-height: 400px;
            }
        }

        @media (max-width: 768px) {
            .cards-container {
                grid-template-columns: 1fr;
            }

            .time-filters {
                flex-wrap: wrap;
            }

            .filter-btn {
                flex: 1;
                min-width: 100px;
            }
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .user-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn-logout {
            background: var(--accent-color);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.2s;
        }

        .btn-logout:hover {
            background: var(--hover-color);
            color: white;
        }

        .btn-back {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-back:hover {
            color: #2980b9;
        }

        .btn-icon {
            background: none;
            border: none;
            color: var(--accent-color);
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-icon:hover {
            color: var(--hover-color);
        }

        .actions {
            display: flex;
            flex-direction: column;
        }

        .view-user,
        .view-info {
            background: none;
            border: none;
            color: var(--accent-color);
            cursor: pointer;
            font-size: 1rem;
            padding: 0.5rem;
            transition: color 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(5px);
            transition: all 0.3s ease;
        }

        .modal {
            background: linear-gradient(to bottom, #ffffff, #f8f9fa);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 1200px;
            max-height: 85vh;
            overflow: hidden;
            animation: modalSlideUp 0.4s ease-out;
        }

        @keyframes modalSlideUp {
            from {
                transform: translateY(30px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 20px 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: none;
        }

        .modal-header h3 {
            font-size: 1.8rem;
            font-weight: 600;
            margin: 0;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
        }

        .modal-close {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1.5rem;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: rotate(90deg);
        }

        .modal-content {
            padding: 30px;
            overflow-y: auto;
            max-height: calc(85vh - 80px);
        }

        /* Requests Modal Specific Styles */
        #requestsModal .modal-table-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
            overflow: hidden;
        }

        #requestsModal table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        #requestsModal th {
            background: #f8f9fa;
            color: #2c3e50;
            font-weight: 600;
            padding: 15px 20px;
            text-transform: uppercase;
            font-size: 0.9rem;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #e9ecef;
        }

        #requestsModal td {
            padding: 15px 20px;
            border-bottom: 1px solid #f1f1f1;
            transition: background-color 0.2s;
        }

        #requestsModal tr:hover td {
            background-color: #f8f9fa;
        }

        /* Status badges in requests table */
        .status {
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: 500;
            text-transform: capitalize;
            font-size: 0.9rem;
            display: inline-block;
            min-width: 100px;
            text-align: center;
        }

        .status.completed {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status.pending {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }

        .status.failed {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        /* User Info Modal Specific Styles */
        .user-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 25px;
            padding: 10px;
        }

        .info-item {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            border: 1px solid #f0f0f0;
        }

        .info-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .info-label {
            color: #6c757d;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }

        .info-value {
            color: #2c3e50;
            font-size: 1.1rem;
            font-weight: 500;
            line-height: 1.4;
        }

        .info-value[data-status="true"] {
            color: #28a745;
            font-weight: 600;
        }

        .info-value[data-status="false"] {
            color: #dc3545;
            font-weight: 600;
        }

        /* Loading Animation */
        .modal-loading {
            display: none;
            justify-content: center;
            align-items: center;
            padding: 30px;
        }

        .modal-loading::after {
            content: '';
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-radius: 50%;
            border-top: 4px solid #3498db;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .modal {
                width: 95%;
                margin: 10px;
                max-height: 90vh;
            }

            .modal-header h3 {
                font-size: 1.4rem;
            }

            .info-item {
                padding: 20px;
            }

            .modal-content {
                padding: 20px;
            }

            #requestsModal td,
            #requestsModal th {
                padding: 12px 15px;
                font-size: 0.9rem;
            }

            .status {
                padding: 4px 8px;
                font-size: 0.8rem;
                min-width: 80px;
            }
        }

        .actions-container {
            display: flex;
            gap: 8px;
            justify-content: flex-start;
            align-items: center;
        }

        .action-button {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            color: white;
        }

        .action-button i {
            font-size: 0.875rem;
            transition: transform 0.2s ease;
        }

        .action-button:hover i {
            transform: scale(1.1);
        }

        .view-requests {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        .view-requests:hover {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            box-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);
        }

        .view-info {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .view-info:hover {
            background: linear-gradient(135deg, #059669, #047857);
            box-shadow: 0 2px 4px rgba(5, 150, 105, 0.2);
        }

        .action-button {
            position: relative;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border: none;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            color: white;
        }

        /* Tooltip styles */
        .action-button::before {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 6px 12px;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            font-size: 0.75rem;
            border-radius: 4px;
            white-space: nowrap;
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            pointer-events: none;
            margin-bottom: 8px;
            z-index: 1000;
        }

        .action-button::after {
            content: '';
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            border: 6px solid transparent;
            border-top-color: rgba(0, 0, 0, 0.8);
            opacity: 0;
            visibility: hidden;
            transition: all 0.2s ease;
            pointer-events: none;
            margin-bottom: 2px;
        }

        .action-button:hover::before,
        .action-button:hover::after {
            opacity: 1;
            visibility: visible;
        }

        /* Button specific styles */
        .view-requests {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
        }

        .view-requests:hover {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            box-shadow: 0 2px 4px rgba(37, 99, 235, 0.2);
        }

        .view-info {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .view-info:hover {
            background: linear-gradient(135deg, #059669, #047857);
            box-shadow: 0 2px 4px rgba(5, 150, 105, 0.2);
        }

        /* Mobile responsive styles */
        @media (max-width: 768px) {
            .actions-container {
                flex-direction: column;
                gap: 6px;
            }

            .action-button {
                width: 100%;
                justify-content: center;
                padding: 8px;
            }

            .action-button::before {
                font-size: 0.7rem;
                padding: 4px 8px;
            }
        }

        .status-icon {
            font-size: 24px;
            color: #007bff;
            cursor: pointer;
            margin-left: 10px;
        }

        .status-icon:hover {
            color: #0056b3;
        }

        .fas.fa-toggle-on {
            color: green;
            /* Icon cho trạng thái 'Active' */
        }

        .fas.fa-toggle-off {
            color: red;
            /* Icon cho trạng thái 'Inactive' */
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <button class="btn-back" onclick="goBack()">
                    <i class="fas fa-arrow-left"></i>
                </button>
                <h1>Dashboard</h1>
            </div>
            <div class="user-controls">
                <div class="btn-icon" title="Username">
                    <i class="fa-solid fa-user"></i>
                    <span class="username" id="currentUser" onclick="handleProfile()"></span>
                </div>
                <button class="btn-logout" onclick="handleLogout()">Logout</button>
            </div>
        </div>

        <div class="cards-container">
            <div class="card">
                <h3>Total Users</h3>
                <div class="number" id="total_users">0</div>
            </div>
            <div class="card">
                <h3>Total Requests</h3>
                <div class="number" id="total_requests">0</div>
            </div>
            <div class="card">
                <h3>Success Rate %</h3>
                <div class="number" id="success_rate">0</div>
            </div>
        </div>

        <div class="data-container">
            <div class="table-container">
                <h3>Users Statistics</h3>
                <table>
                    <thead>
                        <tr>
                            <th>User ID</th>
                            <th>Role</th>
                            <th>Create At</th>
                            <th>Requests</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="requestsTable">
                    </tbody>
                </table>
                <div id="loadingIndicator" style="display: none; text-align: center; padding: 1rem;">
                    <span>Loading...</span>
                </div>
            </div>
            <div class="chart-container">
                <div class="chart-header">
                    <h3>Requests Statistics</h3>
                    <div class="time-filters">
                        <button class="filter-btn active" data-period="14days">14 Days</button>
                        <button class="filter-btn" data-period="month">Month</button>
                        <button class="filter-btn" data-period="year">Year</button>
                    </div>
                </div>
                <div class="chart-scroll-container">
                    <div class="chart-wrapper">
                        <canvas id="requestsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="requestsModal" class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3>User Requests</h3>
                <button class="modal-close" onclick="closeModal('requestsModal')">&times;</button>
            </div>
            <div class="modal-content">
                <div class="modal-table-container" id="requestsTableContainer">
                    <table>
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Request ID</th>
                                <th>User ID</th>
                                <th>Status</th>
                                <th>Created At</th>
                                <th>Updated At</th>
                            </tr>
                        </thead>
                        <tbody id="requestsModalTable">
                        </tbody>
                    </table>
                </div>
                <div id="requestsLoadingIndicator" class="modal-loading"></div>
            </div>
        </div>
    </div>

    <!-- User Info Modal -->
    <div id="userInfoModal" class="modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3>User Information</h3>
                <button class="modal-close" onclick="closeModal('userInfoModal')">&times;</button>
            </div>
            <div class="modal-content">
                <div class="user-info-grid" id="userInfoContent">
                    <!-- Will be populated dynamically -->
                </div>
            </div>
        </div>
    </div>


    <script>
        let isRequestsLoading = false;
        let requestsCurrentPage = 0;
        let requestsPageSize = 10;
        let currentUserId = null;
        // let modalScrollHandler = null;
        let hasMoreRequests = true;
        function handleProfile() {
            window.location.href = 'profile.htm';
        }
        function checkAuth() {
            const token = localStorage.getItem('access_token');
            const userRole = localStorage.getItem('role');
            if (!token) {
                window.location.href = 'index.htm';
            }

            const fullname = localStorage.getItem('fullname');
            document.getElementById('currentUser').textContent = fullname;
        }

        async function handleLogout() {
            const userId = localStorage.getItem('user_id');
            try {
                const response = await fetch('./config/config.json');
                const config = await response.json();
                let requestUrl = `http://${config.ip}:8081/api/v1/auth/logout?userId=${userId}`;
                const result = await apiService.get(requestUrl);
                if (result.data.status === '200') {
                    localStorage.removeItem('access_token');
                    destroyCookie('refreshToken');
                    localStorage.removeItem('fullname');
                    localStorage.removeItem('user_id');
                    localStorage.removeItem('role');
                    localStorage.removeItem('mail');
                    localStorage.removeItem('username');
                    localStorage.removeItem('created_at');
                }
                checkAuth();
            }
            catch (error) {
                console.error('Error fetching data:', error);
                return null;
            }
        }

        function goBack() {
            window.location.href = 'index.htm';
        }

        document.addEventListener('DOMContentLoaded', checkAuth);

        const wsUrl = `ws://localhost:8081/handler?view=metrics`;
        console.log("Connecting to WebSocket:", wsUrl);
        const socket = new WebSocket(wsUrl);

        socket.onopen = function () {
            console.log("WebSocket connection established!");
        };

        socket.onmessage = function (event) {
            try {
                const parsedData = JSON.parse(event.data);
                document.getElementById("total_requests").innerHTML = parsedData.metrics.totalRequests;
                document.getElementById("total_users").innerHTML = parsedData.metrics.totalUsers;
                document.getElementById("success_rate").innerHTML = (parsedData.metrics.successRate) * 100;
                console.log('Total Users:', parsedData.metrics.totalUsers);
                console.log('Total Requests:', parsedData.metrics.totalRequests);
            } catch (error) {
                console.error("Error parsing message data:", error);
            }
        };

        socket.onclose = function () {
            console.log("WebSocket connection closed!");
        };

        socket.onerror = function (error) {
            console.error("WebSocket error:", error);
        };

        let chart;
        async function generateTimeData(period) {
            const response = await fetch('./config/config.json');
            const config = await response.json(); // Lấy cấu hình từ file config
            let requestUrl = `http://${config.ip}:8081/api/v1/statistical`;
            const accessToken = localStorage.getItem('access_token');
            const headers = {
                'Authorization': `Bearer ${accessToken}`
            }
            switch (period) {
                case '14days':
                    requestUrl = requestUrl + "?stype=_fourteen"
                    break;
                case 'month':
                    requestUrl = requestUrl + "?stype=_month"
                    break;
                case 'year':
                    requestUrl = requestUrl + "?stype=_year"
                    break;
            }
            try {
                const result = await apiService.get(requestUrl, { headers });
                return result.data;
            } catch (error) {
                console.error('Error fetching data:', error);
                return null;
            }
        }

        async function initChart(period = '14days') {
            const staticticalData = await generateTimeData(period);
            const dates = staticticalData.map(item => {
                if (period === 'year') {
                    return item.xaxis;
                }
                else {
                    const date = new Date(item.xaxis);
                    return date.toLocaleDateString();
                }

            });
            const data = staticticalData.map(item => item.yaxis);
            const ctx = document.getElementById('requestsChart').getContext('2d');

            if (chart) {
                chart.destroy();
            }

            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dates,
                    datasets: [{
                        label: 'Requests',
                        data: data,
                        borderColor: '#3498db',
                        tension: 0.3,
                        fill: false,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'top'
                        },
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Number of Requests'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'Date'
                            },
                            grid: {
                                display: false
                            },
                            ticks: {
                                maxRotation: 45,
                                minRotation: 45
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    }
                }
            });
        }

        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                initChart(e.target.dataset.period);
            });
        });

        let currentPage = 0;
        const pageSize = 10;
        let isLoading = false;
        let hasMoreData = true;

        async function fetchPageData(page, size) {
            const response = await fetch('./config/config.json');
            const config = await response.json();
            const accessToken = localStorage.getItem('access_token');
            const userId = localStorage.getItem('user_id');
            const url = `http://${config.ip}:8081/api/v1/users/info?page=${page}&limit=${size}`;
            try {
                const result = await apiService.get(url, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`,
                    }
                })
                console.log('Result:', result);
                return result.data.content;
            } catch (error) {
                console.error('Error fetching page data:', error);
                return [];
            }
        }

        async function loadNextPage() {
            if (isLoading || !hasMoreData) return;

            isLoading = true;
            document.getElementById('loadingIndicator').style.display = 'block';

            const data = await fetchPageData(currentPage, pageSize);

            if (!Array.isArray(data) || data.length === 0) {
                hasMoreData = false;
            } else {
                populateTable(data);
                currentPage++;
            }

            isLoading = false;
            document.getElementById('loadingIndicator').style.display = 'none';
        }

        function populateTable(data) {
            if (!Array.isArray(data)) {
                console.log('Expected an array but received:', data);
                return;
            }
            const tableBody = document.getElementById('requestsTable');
            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                <td class="request-id" data-full-text="${row.userID || 'N/A'}">
                    ${row.userID ? row.userID.slice(0, 10) + '...' : 'N/A'}
                </td>
                <td>${row.role}</td>
                <td>${new Date(row.createAt).toLocaleString() || 'N/A'}</td>
                <td>${row.requests || 'N/A'}</td>
          
                <td>
                <div class="actions-container">
                    <button 
                        class="action-button view-requests" 
                        data-tooltip="Requests"
                        onClick="viewRequests('${row.userID}')"
                    >
                        <i class="fas fa-list-ul"></i>
                    </button>
                    <button 
                        class="action-button view-info"
                        data-tooltip="User Info"
                        onClick="viewUser('${row.userID}')"
                    >
                        <i class="fas fa-user"></i>
                    </button>
                </div>
            </td>
            `;
                tableBody.appendChild(tr);
            });
        }

        async function viewRequests(userId) {
            // Reset pagination variables
            requestsCurrentPage = 0;
            hasMoreRequests = true;
            currentUserId = userId;
            isRequestsLoading = false;

            // Clear existing data and event listeners
            const requestsTable = document.getElementById('requestsModalTable');
            requestsTable.innerHTML = '';
            const modalContent = document.querySelector('#requestsModal .modal-content');
            if (modalContent) {
                modalContent.removeEventListener('scroll', handleRequestsScroll);
            }

            // Show modal
            const modal = document.getElementById('requestsModal');
            modal.style.display = 'flex';

            // Load initial data
            await loadMoreRequests();

            // Add scroll event listener to modal content
            modalContent.addEventListener('scroll', handleRequestsScroll);

            // Log for debugging
            console.log('Modal content scroll height:', modalContent.scrollHeight);
            console.log('Modal content client height:', modalContent.clientHeight);
        }

        function handleRequestsScroll(event) {
            const container = event.target;

            // Calculate scroll metrics
            const scrollPosition = container.scrollTop;
            const totalHeight = container.scrollHeight;
            const visibleHeight = container.clientHeight;
            const distanceFromBottom = totalHeight - (scrollPosition + visibleHeight);

            // Log scroll metrics for debugging
            console.log('Scroll Position:', scrollPosition);
            console.log('Total Height:', totalHeight);
            console.log('Visible Height:', visibleHeight);
            console.log('Distance from Bottom:', distanceFromBottom);

            // Load more when within 50px of the bottom
            if (distanceFromBottom < 50 && !isRequestsLoading && hasMoreRequests) {
                console.log('Loading more requests...');
                loadMoreRequests();
            }
        }

        async function loadMoreRequests() {
            if (isRequestsLoading || !hasMoreRequests) {
                console.log('Skipping load - already loading or no more data');
                return;
            }

            try {
                isRequestsLoading = true;
                const loadingIndicator = document.getElementById('requestsLoadingIndicator');
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'flex';
                }

                console.log('Loading page:', requestsCurrentPage);

                const response = await fetch('./config/config.json');
                const config = await response.json();
                const accessToken = localStorage.getItem('access_token');

                const url = `http://${config.ip}:8081/api/v1/requests/info?userId=${currentUserId}&page=${requestsCurrentPage}&limit=${requestsPageSize}`;
                console.log('Fetching from URL:', url);

                const result = await apiService.get(url, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });

                console.log('Received data:', result.data);

                const requestsTable = document.getElementById('requestsModalTable');

                if (!result.data.content || result.data.content.length === 0) {
                    console.log('No more data available');
                    hasMoreRequests = false;
                    return;
                }

                // Append new data
                result.data.content.forEach(request => {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `
                <td>${request.id || 'N/A'}</td>
                <td class="request-id" data-full-text="${request.requestID}">${request.requestID.slice(0, 10)}...</td>
                <td class="request-id" data-full-text="${request.userID}">${request.userID.slice(0, 10)}...</td>
                <td><span class="status ${request.status.toLowerCase()}">${request.status}</span></td>
                <td>${new Date(request.createdAt).toLocaleString()}</td>
                <td>${new Date(request.updatedAt).toLocaleString()}</td>
            `;
                    requestsTable.appendChild(tr);
                });

                requestsCurrentPage++;
                console.log('Incremented page to:', requestsCurrentPage);

            } catch (error) {
                console.error('Error fetching requests:', error);
                hasMoreRequests = false;
            } finally {
                isRequestsLoading = false;
                const loadingIndicator = document.getElementById('requestsLoadingIndicator');
                if (loadingIndicator) {
                    loadingIndicator.style.display = 'none';
                }
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (!modal) return;

            modal.style.display = 'none';

            if (modalId === 'requestsModal') {
                // Remove scroll event listener
                const modalContent = modal.querySelector('.modal-content');
                if (modalContent) {
                    modalContent.removeEventListener('scroll', handleRequestsScroll);
                }

                // Reset all states
                requestsCurrentPage = 0;
                hasMoreRequests = true;
                currentUserId = null;
                isRequestsLoading = false;

                // Clear table
                const requestsTable = document.getElementById('requestsModalTable');
                if (requestsTable) {
                    requestsTable.innerHTML = '';
                }
            }
        }

        // Add this to your HTML to ensure the modal content is scrollable
        document.addEventListener('DOMContentLoaded', function () {
            const style = document.createElement('style');
            style.textContent = `
        #requestsModal .modal-content {
            max-height: 70vh;
            overflow-y: auto;
            scroll-behavior: smooth;
        }
        
        #requestsModal .modal-table-container {
            min-height: 200px;
        }
        
        #requestsLoadingIndicator {
            padding: 20px;
            text-align: center;
        }
    `;
            document.head.appendChild(style);
        });

        // Update window click handler to use the new closeModal function
        window.onclick = function (event) {
            if (event.target.classList.contains('modal-overlay')) {
                closeModal(event.target.id);
            }
        }

        async function viewUser(userId) {
            try {
                const response = await fetch('./config/config.json');
                const config = await response.json();
                const accessToken = localStorage.getItem('access_token');

                // Show loading state
                const modal = document.getElementById('userInfoModal');
                modal.style.display = 'flex';
                const content = document.getElementById('userInfoContent');
                content.innerHTML = '<div class="loading">Loading user information...</div>';

                const url = `http://${config.ip}:8081/api/v1/user/${userId}`;
                const result = await apiService.get(url, {
                    headers: {
                        'Authorization': `Bearer ${accessToken}`
                    }
                });

                const userInfo = result.data;
                content.innerHTML = `
            <div class="info-item">
                <div class="info-label">User ID</div>
                <div class="info-value">${userInfo.userID || 'N/A'}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Username</div>
                <div class="info-value">${userInfo.username || 'N/A'}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Email</div>
                <div class="info-value">
                    <a href="mailto:${userInfo.email}" class="email-link">
                        ${userInfo.email || 'N/A'}
                    </a>
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">Full Name</div>
                <div class="info-value">${userInfo.fullName || 'N/A'}</div>
            </div>
            <div class="info-item">
                <div class="info-label">Role</div>
                <div class="info-value">
                    <span class="role-badge ${userInfo.role.toLowerCase()}">
                        ${userInfo.role || 'N/A'}
                    </span>
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">Account Status</div>
                <div class="info-value" data-status="${userInfo.activeFlg=='1'}">
                    ${userInfo.activeFlg=='1' ? 'Active' : 'Inactive'}
                </div>
                <i 
                    class="status-icon ${userInfo.activeFlg == '1' ? 'fas fa-toggle-on' : 'fas fa-toggle-off'}" 
                    onclick="toggleAccountStatus('${userInfo.userID}', ${userInfo.activeFlg})"
                    title="${userInfo.activeFlg =='1' ? 'Disable Account' : 'Enable Account'}">
                </i>
            </div>

            <div class="info-item">
                <div class="info-label">Delete Status</div>
                <div class="info-value" data-status="${userInfo.deleteFlg === '0'}">
                    ${userInfo.deleteFlg === '1' ? 'Deleted' : 'Available'}
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">Created At</div>
                <div class="info-value">
                    ${new Date(userInfo.createDt).toLocaleString()}
                </div>
            </div>
            <div class="info-item">
                <div class="info-label">Last Updated</div>
                <div class="info-value">
                    ${new Date(userInfo.updateDt).toLocaleString()}
                </div>
            </div>
        `;
            } catch (error) {
                console.error('Error fetching user info:', error);
                const content = document.getElementById('userInfoContent');
                content.innerHTML = `
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                Failed to load user information. Please try again later.
            </div>
        `;
            }
        }


        function handleScroll() {
            const tableContainer = document.querySelector('.table-container');
            const scrollPosition = tableContainer.scrollTop + tableContainer.clientHeight;
            const scrollHeight = tableContainer.scrollHeight;

            if (scrollHeight - scrollPosition < 50) {
                loadNextPage();
            }
        }

        document.querySelector('.table-container').addEventListener('scroll', handleScroll);

        async function toggleAccountStatus(userId, currentStatus) {
            console.log('Toggling account status for user:', userId);
            console.log('Current Status:', currentStatus);
            const newStatus = !currentStatus;

            enhancedDialog.showConfirm({
                title: newStatus ? 'Enable Account' : 'Disable Account',
                message: newStatus
                    ? 'Are you sure you want to enable this account?'
                    : 'Are you sure you want to disable this account?',
                onConfirm: async () => {
                    try {
                        const response = await fetch('./config/config.json');
                        const config = await response.json();
                        const accessToken = localStorage.getItem('access_token');
                        const functionUrl = newStatus ? 'enable' : 'disable';
                        const result = await apiService.get(`http://${config.ip}:8081/api/v1/auth/${functionUrl}?userId=${userId}`,
                            {
                                headers: {
                                    'Authorization': `Bearer ${accessToken}`,
                                    'Content-Type': 'application/json'
                                }
                            }
                        )

                        if (result.data.status === '200') {
                            enhancedDialog.showMessage({
                                title:'Message',
                                message: result.data.message
                            })
                            // Update the UI without reloading
                            const statusIcon = document.querySelector(`[onclick="toggleAccountStatus('${userId}', ${currentStatus})"]`);
                            const statusValue = statusIcon.previousElementSibling;

                            statusIcon.classList.remove(newStatus ? 'fa-toggle-off' : 'fa-toggle-on');
                            statusIcon.classList.add(newStatus ? 'fa-toggle-on' : 'fa-toggle-off');
                            statusValue.textContent = newStatus ? 'Active' : 'Inactive';
                            statusValue.setAttribute('data-status', newStatus);

                            // Update the click handler
                            statusIcon.setAttribute('onclick', `toggleAccountStatus('${userId}', ${newStatus})`);
                        } else {
                            throw new Error('Failed to update account status');
                        }
                    } catch (error) {
                        console.error('Error updating account status:', error);
                    }
                }
            });
        }
        loadNextPage();

        populateTable();

        initChart();
    </script>
</body>

</html>