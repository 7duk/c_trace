<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="./service/apiService.js"></script>
    <script src="./service/dialog.js"></script>
    <script src="./service/utils.js"></script>
    <script src="./service/spinner.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <title>Quản lý Hệ thống Hỗ trợ</title>
    <style>
        :root {
            --primary-bg: #ffffff;
            --secondary-bg: #f8f9fa;
            --accent-color: #0d6efd;
            --hover-color: #0b5ed7;
            --text-primary: #212529;
            --text-secondary: #6c757d;
            --border-color: #dee2e6;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --border-radius: 8px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f5f5f5;
        }

        /* Main Content Styles */
        .main-content {
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        /* Search Bar */
        .search-bar {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .search-bar input,
        .search-bar select {
            padding: 8px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        /* Statistics Grid */
        .ticket-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stats-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .stats-number {
            font-size: 24px;
            font-weight: bold;
            margin: 10px 0;
            color: #1a237e;
        }

        /* Ticket List Table */
        .ticket-list {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .ticket-table {
            width: 100%;
            border-collapse: collapse;
        }

        .ticket-table th,
        .ticket-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .ticket-table th {
            background: #f8f9fa;
            font-weight: bold;
        }

        /* Status Badges */
        .status-badge {
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
        }

        .status-new {
            background: #E3F2FD;
            color: #1976D2;
        }

        .status-in_progress {
            background: #FFF3E0;
            color: #E65100;
        }

        .status-resolved {
            background: #E8F5E9;
            color: #2E7D32;
        }

        /* Action Buttons */
        .action-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
            font-size: 12px;
            color: white;
        }

        .btn-view {
            background: #9E9E9E;
        }

        .btn-assign {
            background: #2196F3;
        }

        .btn-resolve,
        .btn-send-resolve {
            background: #4CAF50;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100vh;
            background: rgba(0, 0, 0, 0.5);
            overflow-y: auto;
        }

        .close-btn {
            position: absolute;
            right: 15px;
            top: 15px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s;
        }

        .close-btn:hover {
            background-color: #f0f0f0;
        }

        .modal-content {
            position: relative;
            background: white;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            /* Giới hạn chiều cao tối đa là 80% viewport height */
            margin: 2vh auto;
            /* Margin top và bottom 2% viewport height */
            padding: 20px;
            border-radius: 8px;
            overflow-y: auto;
            /* Cho phép cuộn nếu nội dung dài */
        }

        .ticket-detail {
            margin: 15px 0;
        }

        .response-form textarea {
            width: 100%;
            min-height: 100px;
            /* Giảm chiều cao tối thiểu */
            max-height: 150px;
            /* Thêm chiều cao tối đa */
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
            /* Cho phép resize theo chiều dọc */
        }

        .pagination {
            display: flex;
            justify-content: center;
            padding: 20px 0;
            border-top: 1px solid #ddd;
        }

        .pagination-controls {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .page-btn,
        .page-number {
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            background: white;
            cursor: pointer;
            border-radius: 4px;
            min-width: 40px;
            text-align: center;
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .page-number.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        .page-numbers {
            display: flex;
            gap: 4px;
        }

        .description {
            min-height: 100px;
            display: flex;
            flex-direction: column;
        }

        .value_description {
            width: 100%;
            min-height: 100px;
            max-height: 150px;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
        }

        .ticket-timeline {
            position: relative;
            padding: 20px 0;
            margin: 10px 0;
        }

        .timeline-track {
            position: absolute;
            top: 40%;
            /* Thay đổi từ 40px thành 50% */
            left: 50px;
            right: 50px;
            height: 4px;
            background: #e0e0e0;
            z-index: 1;
            transform: translateY(-50%);
            /* Thêm transform để căn giữa chính xác */
        }

        .timeline-steps {
            display: flex;
            justify-content: space-between;
            position: relative;
            z-index: 2;
        }

        .timeline-step {
            text-align: center;
            position: relative;
            width: 100px;
        }

        .step-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #fff;
            border: 2px solid #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
            position: relative;
            /* Thêm position relative */
            z-index: 3;
            /* Đảm bảo icon luôn hiển thị trên timeline track */
        }

        .step-label {
            font-size: 14px;
            color: #666;
        }

        /* Styles for active state */
        .timeline-step.active .step-icon {
            background: #4CAF50;
            border-color: #4CAF50;
            color: white;
        }

        .timeline-step.active .step-label {
            color: #4CAF50;
            font-weight: bold;
        }

        /* Styles for completed state */
        .timeline-step.completed .step-icon {
            background: #4CAF50;
            border-color: #4CAF50;
            color: white;
        }

        .timeline-step.completed .step-label {
            color: #4CAF50;
        }

        /* Progress line style */
        .timeline-step.completed+.timeline-step.active:before {
            background: #4CAF50;
        }

        button:disabled {
            cursor: not-allowed;
            /* Hiển thị icon cấm */
            opacity: 0.6;
            /* Làm mờ button để rõ ràng hơn */
        }

        .row {
            margin: 5px 0;
        }

        @media (max-height: 768px) {
            .modal-content {
                max-height: 90vh;
                margin: 1vh auto;
            }

            .value_description,
            .response-form textarea {
                min-height: 80px;
                max-height: 120px;
            }
        }

        .container {
            padding: 20px;
            background: #f5f6fa;
            min-height: 100vh;
            max-width: 100%;
            overflow-x: hidden;
        }

        .header {
            margin-bottom: 30px;
        }

        .btn-back {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-back:hover {
            color: #2980b9;
        }

        .btn-icon {
            background: none;
            border: none;
            color: var(--accent-color);
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-icon:hover {
            color: var(--hover-color);
        }


        .user-controls {
            display: flex;
            gap: 1rem;
            align-items: center;
        }


        .btn-logout {
            background: var(--accent-color);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.2s;
        }

        .btn-logout:hover {
            background: var(--hover-color);
            color: white;
        }
    </style>
</head>

<body></body>
<div class="container">
    <div class="header">
        <div style="display: flex; align-items: center; gap: 1rem;">
            <button class="btn-back" onclick="goBack()">
                <i class="fas fa-arrow-left"></i>
            </button>
            <h1>Support Request</h1>
        </div>
        <div class="user-controls">
            <div class="btn-icon" title="User Info" onclick="handleProfile()">
                <i class="fa-solid fa-user"></i>
            </div>
            <button class="btn-logout" onclick="handleLogout()">Logout</button>
        </div>
    </div>


    <div class="search-bar">
        <select onchange="loadTickets()"">
                <option value="">All Status</option>
                <option value=" new">NEW</option>
            <option value="in_progress">IN PROGRESS</option>
            <option value="resolved">RESOLVED</option>
        </select>
    </div>


    <div class="ticket-list">
        <table class="ticket-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Email</th>
                    <th>Status</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="ticketTableBody">

            </tbody>
        </table>
        <div class="pagination">
            <div class="pagination-controls">
                <button onclick="previousPage()" class="page-btn" id="prevBtn">«</button>
                <div class="page-numbers">
                    <button onclick="goToPage(1)" class="page-number">1</button>
                    <button onclick="goToPage(2)" class="page-number">2</button>
                    <button onclick="goToPage(3)" class="page-number">3</button>
                </div>
                <button onclick="nextPage()" class="page-btn" id="nextBtn">»</button>
            </div>
        </div>
    </div>
</div>



<div class="modal" id="ticketModal">
    <div class="modal-content">
        <button onclick="closeModal()" class="close-btn">
            <i class="fas fa-times"></i>
        </button>
        <h2>Support Request <strong></strong></h2>
        <div class="ticket-detail">

        </div>

        <div class="status_field"><strong>Status</strong></div>
        <div class="ticket-timeline">

            <div class="timeline-track"></div>
            <div class="timeline-steps">
                <div class="timeline-step" data-status="new">
                    <div class="step-icon">
                        <i class="fas fa-file-alt"></i>
                    </div>
                    <div class="step-label">New</div>
                </div>
                <div class="timeline-step" data-status="in_progress">
                    <div class="step-icon">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="step-label">In Progress</div>
                </div>
                <div class="timeline-step" data-status="resolved">
                    <div class="step-icon">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="step-label">Resolved</div>
                </div>
            </div>
        </div>

        <div class="response-form">
            <h3>Reply to message</h3>
            <textarea placeholder="Please enter your reply..."></textarea>
            <button class="action-btn btn-send-resolve" onclick="sendResponse()">Send</button>
            <button class="action-btn btn-assign" onclick="updateStatus('in_progress')">IN PROGRESS</button>
        </div>
    </div>
</div>

<script>
    let currentTickets = [];
    let currentPage = 1;
    const pageSize = 10;
    let totalPages = 0;
    let totalElements = 0;
    let currentTicketId = 0;
    document.querySelectorAll('button:disabled').forEach(button => {
        button.addEventListener('mouseenter', () => {
            button.style.cursor = 'not-allowed';
        });
        button.addEventListener('mouseleave', () => {
            button.style.cursor = 'default';
        });
    });
    function checkAuth() {
        const token = localStorage.getItem('access_token');
        const userRole = localStorage.getItem('role');
        if (!token) {
            window.location.href = './index.htm';
        }
    }

    async function handleLogout() {
        const userId = localStorage.getItem('user_id');
        try {
            window.spinnerService.show();
            const response = await fetch('./config/config.json');
            const config = await response.json();
            let requestUrl = `${config.url}/api/v1/auth/logout?userId=${userId}`;
            const result = await apiService.get(requestUrl);
            if (result.data.status === '200') {
                localStorage.removeItem('access_token');
                destroyCookie('refreshToken');
                localStorage.removeItem('fullname');
                localStorage.removeItem('user_id');
                localStorage.removeItem('role');
                localStorage.removeItem('mail');
                localStorage.removeItem('username');
                localStorage.removeItem('created_at');
            }
            checkAuth();
        }
        catch (error) {
            console.error('Error fetching data:', error);
            return null;
        }
        finally {
            window.spinnerService.hide();
        }
    }

    function goBack() {
        window.location.href = './index.htm';
    }

    function handleProfile() {
        window.location.href = './profile.htm';
    }

    async function resolverTicket(newStatus) {
        const token = localStorage.getItem('access_token');
        const res = await fetch('./config/config.json');
        const config = await res.json();
        const ticketId = document.querySelector('.ticket-detail p strong').nextSibling.nodeValue.trim();
        const url = `${config.url}/api/v1/supports/${ticketId}/resolver`;

        try {
            window.spinnerService.show();
            const response = await apiService.put(url, { status: newStatus }, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (response.status === 200) {
                enhancedDialog.showConfirm({
                    title: "Message",
                    message: response.data.message,
                    onConfirm: () => {
                        closeModal();
                        loadTickets(currentPage);
                    }
                });

            } else {
                alert('Failed to update status.');
            }
        } catch (error) {
            console.error('Error updating status:', error);
        }
        finally {
            window.spinnerService.hide();
        }
    }
    async function sendResponse() {

        const ticketResponse = currentTickets.find(ticket => ticket.id == currentTicketId);
        const responseText = document.querySelector('.response-form textarea').value;
        const { id, email, title, description, status } = ticketResponse;
        const newTicket = { supportId: id, email, title, description, status, response: responseText };
        console.log(newTicket);
        const token = localStorage.getItem('access_token');
        const res = await fetch('./config/config.json');
        const config = await res.json();
        const url = `${config.url}/api/v1/supports/${newTicket.supportId}/resolver`;
        try {
            window.spinnerService.show();
            const response = await apiService.put(url, newTicket, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (response.status === 200) {
                enhancedDialog.showConfirm({
                    title: "Message",
                    message: response.data.message,
                    onConfirm: () => {
                        closeModal();
                        loadTickets(currentPage);
                    }
                });

            } else {
                alert('Failed to update status.');
            }
        } catch (error) {
            console.error('Error updating status:', error);
        }
        finally {
            window.spinnerService.hide();
        }
    }

    async function updateStatus(newStatus) {
        const token = localStorage.getItem('access_token');
        const res = await fetch('./config/config.json');
        const config = await res.json();
        const ticketId = currentTicketId;
        const url = `${config.url}/api/v1/supports/${ticketId}/status`;

        try {
            window.spinnerService.show();
            const response = await apiService.put(url, { status: newStatus }, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            if (response.status === 200) {
                enhancedDialog.showConfirm({
                    title: "Message",
                    message: response.data.message,
                    onConfirm: () => {
                        closeModal();
                        loadTickets(currentPage);
                    }
                });

            } else {
                alert('Failed to update status.');
            }
        } catch (error) {
            console.error('Error updating status:', error);
        }
        finally {
            window.spinnerService.hide();
        }
    }


    async function getSupports(page, size, title, status) {
        const token = localStorage.getItem('access_token');
        const res = await fetch('./config/config.json');
        const config = await res.json();
        const url = `${config.url}/api/v1/supports?page=${page}&size=${size}&title=${title}&status=${status}`;
        console.log(url);
        const response = await apiService.get(url, {
            headers: {
                'Authorization': `Bearer ${token}`
            }
        })
        if (response.status == 200) {
            return response.data;
        }
    }


    async function loadTickets() {
        try {
            window.spinnerService.show();
            const response = await searchTickets();
            if (response) {
                const content = response.content;
                currentTickets = content;
                totalElements = response.page.totalElements;
                totalPages = response.page.totalPages;

                const tableBody = document.getElementById('ticketTableBody');
                tableBody.innerHTML = content.map(ticket =>
                    `<tr>
                        <td>${ticket.id}</td>
                        <td>${ticket.title}</td>
                        <td>${ticket.email}</td>
                        <td><span class="status-badge status-${ticket.status.toLowerCase()}">${ticket.status}</span></td>
                        <td>${new Date(ticket.createdAt).toLocaleString()}</td>
                        <td>
                            <button class="action-btn btn-resolve" onclick='viewTicket(${JSON.stringify(ticket)})' ${ticket.status == 'RESOLVED' ? 'disabled' : ""}>Resolver</button>
                        </td>
                    </tr>
                `).join('');
                updatePaginationUI();
                updatePagination()
            }
        } catch (error) {
            console.error('Error loading tickets:', error);
        }
        finally {
            window.spinnerService.hide();
        }
    }
    function updatePagination() {
        const pageButtons = document.querySelectorAll('.page-number');
        pageButtons.forEach((button) => {
            const pageNum = parseInt(button.textContent);
            button.classList.toggle('active', pageNum === currentPage);
        });

        document.getElementById('prevBtn').disabled = currentPage === 1;
        document.getElementById('nextBtn').disabled = currentPage >= totalPages;
    }

    function updatePaginationUI() {
        const pageNumbers = document.querySelector('.page-numbers');
        pageNumbers.innerHTML = '';
        for (let i = 1; i <= Math.min(3, totalPages); i++) {
            pageNumbers.innerHTML += `
            <button onclick="goToPage(${i})" class="page-number">${i}</button>
        `;
        }
    }

    function goToPage(page) {
        if (page >= 1 && page <= totalPages) {
            currentPage = page;
            loadTickets(currentPage);
        }
    }

    function nextPage() {
        if (currentPage < totalPages) {
            goToPage(currentPage + 1);
        }
    }

    function previousPage() {
        if (currentPage > 1) {
            goToPage(currentPage - 1);
        }
    }

    async function initialize() {
        await loadTickets();
    }

    document.addEventListener('DOMContentLoaded', () => {
        initialize();
    });



    async function searchTickets() {
        // currentPage = 0; const searchTitle = document.querySelector('input[type="text"]').value;
        const searchStatus = document.querySelector('select').value.toUpperCase().trim();
        try {
            const response = await getSupports(currentPage - 1, pageSize, '', searchStatus);
            return response;
        } catch (error) {
            console.error('Error searching tickets:', error);
        }
        return null;
    }

    function viewTicket(ticket) {
        currentTicketId = ticket.id;
        const strongElement = document.querySelector('h2 strong');
        if (strongElement) {
            strongElement.textContent = currentTicketId;
        }
        const modal = document.getElementById('ticketModal');
        updateTimeline(ticket.status);
        if (ticket) {
            document.querySelector('.ticket-detail').innerHTML = `
                    <p class='row'><strong>Title:</strong> ${ticket.title}</p>
                    <p class='row'><strong>Email:</strong> ${ticket.email}</p>
                    <div class='description'><strong>Description:</strong> <textarea class='value_description' rows="4">${ticket.description}</textarea></div>
                    <p class='row'><strong>Timestamp:</strong> ${new Date(ticket.createdAt).toLocaleString()}</p>
                `;
            modal.style.display = 'block';
            if (ticket.status.toLowerCase() == 'new') {
                document.getElementsByClassName('btn-send-resolve')[0].disabled = true;
                document.getElementsByClassName('btn-send-resolve')[0].style.backgroundColor = 'gray';

                document.getElementsByClassName('btn-assign')[0].disabled = false;
                document.getElementsByClassName('btn-assign')[0].style.backgroundColor = '#2196F3';
            } else {
                document.getElementsByClassName('btn-send-resolve')[0].disabled = false;
                document.getElementsByClassName('btn-send-resolve')[0].style.backgroundColor = '#4CAF50';

                document.getElementsByClassName('btn-assign')[0].disabled = true;
                document.getElementsByClassName('btn-assign')[0].style.backgroundColor = 'gray';
            }
        }
    }
    function closeModal() {
        document.getElementById('ticketModal').style.display = 'none';
    }

    function updateTimeline(currentStatus) {
        const steps = document.querySelectorAll('.timeline-step');
        const statusOrder = ['new', 'in_progress', 'resolved'];
        const currentIndex = statusOrder.indexOf(currentStatus.toLowerCase());

        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');

            if (index < currentIndex) {
                step.classList.add('completed');
            } else if (index === currentIndex) {
                step.classList.add('active');
            }
        });
    }


</script>
</body>

</html>