<!DOCTYPE html>
<html>

<head>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="./service/apiService.js"></script>
    <script src="./service/dialog.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f5f5f5;
            position: relative;
        }

        .form-container {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
        }

        .form-title {
            text-align: center;
            margin-bottom: 2rem;
            color: #333;
            font-size: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-weight: 500;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-group input:focus {
            outline: none;
            border-color: #4A90E2;
        }

        .error {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
            display: none;
        }

        .form-group input.error-input {
            border-color: #dc3545;
        }

        .submit-btn {
            width: 100%;
            padding: 0.75rem;
            background-color: #4A90E2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }

        .submit-btn:hover {
            background-color: #357ABD;
        }

        .submit-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 5000;
        }

        .modal-content {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
            text-align: center;
            position: relative;
            animation: modalSlideIn 0.3s ease-out;
        }

        @keyframes modalSlideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-title {
            font-size: 1.25rem;
            margin-bottom: 1rem;
            color: #333;
        }

        .modal-message {
            margin-bottom: 1.5rem;
            color: #666;
        }

        .modal-message.success {
            color: #28a745;
        }

        .modal-message.error {
            color: #dc3545;
        }

        .verification-dialog {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .verification-content {
            background-color: white;
            padding: 2rem;
            border-radius: 8px;
            width: 90%;
            max-width: 400px;
            text-align: center;
            animation: modalSlideIn 0.3s ease-out;
        }

        .verification-title {
            font-size: 1.25rem;
            margin-bottom: 1rem;
            color: #333;
        }

        .verification-message {
            margin-bottom: 1.5rem;
            color: #666;
        }

        .code-inputs {
            display: flex;
            gap: 8px;
            justify-content: center;
            margin-bottom: 1.5rem;
        }

        .code-input {
            width: 40px;
            height: 50px;
            border: 1px solid #ddd;
            border-radius: 4px;
            text-align: center;
            font-size: 1.25rem;
            margin: 0 4px;
        }

        .code-input:focus {
            outline: none;
            border-color: #4A90E2;
        }

        .verify-btn {
            width: 100%;
            padding: 0.75rem;
            background-color: #4A90E2;
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-bottom: 1rem;
        }

        .verify-btn:hover {
            background-color: #357ABD;
        }

        .verify-btn:disabled {
            background-color: #ccc;
            cursor: not-allowed;
        }

        .spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }


        .close-btn {
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            font-size: 24px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .close-btn:hover {
            background-color: rgba(0, 0, 0, 0.05);
            color: #333;
            transform: rotate(90deg);
        }

        .back-to-login {
            padding: 8px 12px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            color: #666;
            font-size: 0.9rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            background: none;
            border: none;
            cursor: pointer;
            margin-bottom: 20px;
        }

        .back-to-login svg {
            width: 18px;
            height: 18px;
            transition: transform 0.3s ease;
        }

        .back-to-login:hover {
            background-color: rgba(74, 144, 226, 0.1);
            color: #4A90E2;
        }

        .back-to-login:hover svg {
            transform: translateX(-4px);
            color: #4A90E2;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Style cho nút back trong modal */
        .modal-content .back-to-login,
        .verification-content .back-to-login {
            width: 100%;
            justify-content: center;
            margin-top: 12px;
            padding: 10px;
            border: 1px solid #eee;
        }

        /* Đảm bảo modal content có position relative để close-btn hoạt động đúng */
        .modal-content,
        .verification-content {
            position: relative;
        }

        /* Điều chỉnh layout cho modal content */
        .modal-content {
            padding-top: 40px;
            /* Tạo khoảng trống cho close-btn */
        }
    </style>
</head>

<body>
    <div class="form-container">
        <button type="button" class="back-to-login" onclick="goToLogin()">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            <span>Back</span>
        </button>
        <h2 class="form-title">Register</h2>
        <form id="registerForm" novalidate>
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username">
                <span class="error" id="username-error"></span>
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password">
                <span class="error" id="password-error"></span>
            </div>

            <div class="form-group">
                <label for="fullname">Full Name</label>
                <input type="text" id="fullname" name="fullname">
                <span class="error" id="fullname-error"></span>
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email">
                <span class="error" id="email-error"></span>
            </div>

            <button type="submit" class="submit-btn">
                <span class="spinner" id="submitSpinner"></span>
                Register
            </button>


        </form>
    </div>

    <!-- Modal -->
    <div class="modal" id="responseModal">
        <div class="modal-content">
            <h3 class="modal-title">Registration Status</h3>
            <p class="modal-message" id="modalMessage"></p>
            <button class="submit-btn" onclick="handleModalResponse()">OK</button>
            <button type="button" class="back-to-login" onclick="goToLogin()">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                <span>Back to Login</span>
            </button>
        </div>
    </div>

    <div class="verification-dialog" id="verificationDialog">
        <div class="verification-content">
            <button class="close-btn" onclick="closeDialog()"><i class="fa-solid fa-xmark"></i></button>
            <h3 class="verification-title">Verify Your Account</h3>
            <p class="verification-message">Please enter the 6-digit code sent to your email</p>
            <div class="code-inputs">
                <input type="text" maxlength="1" class="code-input" />
                <input type="text" maxlength="1" class="code-input" />
                <input type="text" maxlength="1" class="code-input" />
                <input type="text" maxlength="1" class="code-input" />
                <input type="text" maxlength="1" class="code-input" />
                <input type="text" maxlength="1" class="code-input" />
            </div>
            <button class="verify-btn" onclick="verifyCode()">Verify</button>
            <button class="submit-btn" onclick="resendCode()">Resend Code</button>
            <button type="button" class="back-to-login" onclick="goToLogin()">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                <span>Back to Login</span>
            </button>
        </div>
    </div>

    <script>
        const form = document.getElementById('registerForm');
        const inputs = form.querySelectorAll('input');
        const modal = document.getElementById('responseModal');
        const modalMessage = document.getElementById('modalMessage');
        const submitSpinner = document.getElementById('submitSpinner');

        const showError = (input, message) => {
            const errorElement = document.getElementById(`${input.id}-error`);
            errorElement.textContent = message;
            errorElement.style.display = 'block';
            input.classList.add('error-input');
        };

        const hideError = (input) => {
            const errorElement = document.getElementById(`${input.id}-error`);
            errorElement.style.display = 'none';
            input.classList.remove('error-input');
        };

        function closeDialog() {
            const dialog = document.getElementById('verificationDialog');
            dialog.style.display = 'none';
        }


        const validateInput = (input) => {
            const value = input.value.trim();

            switch (input.id) {
                case 'username':
                    if (!value) {
                        showError(input, 'Username is required');
                        return false;
                    }
                    if (value.length < 3) {
                        showError(input, 'Username must be at least 3 characters long');
                        return false;
                    }
                    break;

                case 'password':
                    if (!value) {
                        showError(input, 'Password is required');
                        return false;
                    }
                    if (value.length < 6) {
                        showError(input, 'Password must be at least 6 characters long');
                        return false;
                    }
                    break;

                case 'fullname':
                    if (!value) {
                        showError(input, 'Full name is required');
                        return false;
                    }
                    if (value.length < 2) {
                        showError(input, 'Please enter a valid full name');
                        return false;
                    }
                    break;

                case 'email':
                    if (!value) {
                        showError(input, 'Email is required');
                        return false;
                    }
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(value)) {
                        showError(input, 'Please enter a valid email address');
                        return false;
                    }
                    break;
            }

            hideError(input);
            return true;
        };

        const showModal = (message, isSuccess = true) => {
            modalMessage.textContent = message;
            modalMessage.className = 'modal-message ' + (isSuccess ? 'success' : 'error');
            modal.style.display = 'flex';
        };

        const handleModalResponse = () => {
            modal.style.display = 'none';
            if (modalMessage.classList.contains('success')) {
                // goToLogin();
                showVerificationDialog();
                setupCodeInputs(); // Setup the verification code inputs
            }
        };

        const showVerificationDialog = () => {
            document.getElementById('verificationDialog').style.display = 'flex';
            const firstInput = document.querySelector('.code-input');
            firstInput.focus();
        };

        const verifyCode = async () => {
            const inputs = document.querySelectorAll('.code-input');
            const code = Array.from(inputs).map(input => input.value).join('');

            if (code.length !== 6) {
                showModal('Please enter all 6 digits', true);
                return;
            }

            try {
                const email = localStorage.getItem('temp_mail');
                const response = await fetch('./config/config.json');
                const config = await response.json();
                const requestUrl = `${config.url}/api/v1/auth/verify?email=${email}`;


                const result = await apiService.post(requestUrl, {
                    verifyCode: code
                },);

                if (result.data.status == 200) {
                    localStorage.removeItem('temp_mail');
                    document.getElementById('verificationDialog').style.display = 'none';
                    showModal(result.data.message, true);
                    setTimeout(goToLogin, 1000);
                }
            } catch (error) {
                var elements = document.getElementsByClassName('code-input');
                Array.from(elements).forEach((element) => {
                    element.value = '';
                });
            }
        };

        const resendCode = async () => {
            try {
                const email = localStorage.getItem('temp_mail');
                const response = await fetch('./config/config.json');
                const config = await response.json();
                const requestUrl = `${config.url}/api/v1/auth/resend-code?email=${email}`;

                const result = await apiService.get(requestUrl);
                console.log(result.data.status);
                if (result.data.status == 200) {
                    showModal(result.data.message, true);
                } else {
                    showModal('Failed to resend code. Please try again.', false);
                }
            } catch (error) {
                showModal(error.message || 'Failed to resend code. Please try again.', false);
            }
        };

        // Handle verification code inputs
        const setupCodeInputs = () => {
            const inputs = document.querySelectorAll('.code-input');

            inputs.forEach((input, index) => {
                input.addEventListener('keyup', (e) => {
                    if (e.key >= 0 && e.key <= 9) {
                        if (index < inputs.length - 1) {
                            inputs[index + 1].focus();
                        }
                    } else if (e.key === 'Backspace') {
                        if (index > 0) {
                            inputs[index - 1].focus();
                        }
                    }
                });

                input.addEventListener('keypress', (e) => {
                    if (e.key < '0' || e.key > '9') {
                        e.preventDefault();
                    }
                });
            });
        };

        const goToLogin = () => {
            // Redirect to login page
            window.location.href = './login.htm';
            console.log('Redirecting to login page...');
        };

        // Add input event listeners for real-time validation
        inputs.forEach(input => {
            input.addEventListener('input', () => validateInput(input));
            input.addEventListener('blur', () => validateInput(input));
        });

        // Simulate API call
        const simulateApiCall = async (formData) => {
            const response = await fetch('./config/config.json');
            const config = await response.json(); // Lấy cấu hình từ file config
            let requestUrl = `${config.url}/api/v1/auth/register`;
            const result = await apiService.post(requestUrl, formData);
            const mail = document.getElementById('email').value.trim();
            localStorage.setItem('temp_mail', mail);
            if (result.data.status == '201') {
                return { success: true, message: result.data.message };
            }
        };

        // Form submission
        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            let isValid = true;
            inputs.forEach(input => {
                if (!validateInput(input)) {
                    isValid = false;
                }
            });

            if (isValid) {
                submitSpinner.style.display = 'inline-block';
                const submitBtn = form.querySelector('.submit-btn');
                submitBtn.disabled = true;

                try {
                    const formData = {
                        username: form.username.value.trim(),
                        password: form.password.value.trim(),
                        fullname: form.fullname.value.trim(),
                        email: form.email.value.trim()
                    };
                    const response = await simulateApiCall(formData);
                    showModal(response.message, true);
                    form.reset();
                } finally {
                    submitSpinner.style.display = 'none';
                    submitBtn.disabled = false;
                }
            }
        });
    </script>
</body>

</html>