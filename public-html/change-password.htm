<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Password</title>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="./service/apiService.js"></script>
    <script src="./service/dialog.js"></script>
    <script src="./service/spinner.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background: #f5f6fa;
        }

        .container {
            padding: 20px;
            max-width: 600px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 30px;
        }

        .btn-back {
            background: none;
            border: none;
            color: #3498db;
            cursor: pointer;
            font-size: 1.2rem;
            padding: 0.5rem;
            transition: color 0.2s;
        }

        .btn-back:hover {
            color: #2980b9;
        }

        .form-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 30px;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        .form-label {
            display: block;
            color: #7f8c8d;
            font-size: 0.9rem;
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 1rem;
            transition: border-color 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3498db;
        }

        .form-input.error {
            border-color: #e74c3c;
        }

        .form-input.valid {
            border-color: #2ecc71;
        }

        .btn-submit {
            background: #3498db;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 12px 24px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.2s;
            width: 100%;
        }

        .btn-submit:hover {
            background: #2980b9;
        }

        .btn-submit:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .error-message {
            color: #e74c3c;
            font-size: 0.9rem;
            margin-top: 5px;
            display: none;
        }

        .password-requirements {
            margin-top: 10px;
            font-size: 0.85rem;
            color: #7f8c8d;
        }

        .requirement {
            margin: 5px 0;
        }

        .requirement i {
            margin-right: 5px;
        }

        .requirement.valid {
            color: #2ecc71;
        }

        .requirement.invalid {
            color: #e74c3c;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <button class="btn-back" onclick="goBack()">
                <i class="fas fa-arrow-left"></i>
            </button>
            <h1>Change Password</h1>
        </div>

        <div class="form-card">
            <form id="changePasswordForm" onsubmit="handleSubmit(event)">
                <div class="form-group">
                    <label class="form-label" for="currentPassword">Current Password</label>
                    <input type="password" id="currentPassword" class="form-input" required>
                    <div class="error-message" id="currentPasswordError"></div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="newPassword">New Password</label>
                    <input type="password" id="newPassword" class="form-input" required>
                    <div class="error-message" id="newPasswordError"></div>
                    <div class="password-requirements">
                        <div class="requirement" id="length">
                            <i class="fas fa-times"></i> At least 8 characters
                        </div>
                        <div class="requirement" id="uppercase">
                            <i class="fas fa-times"></i> At least one uppercase letter
                        </div>
                        <div class="requirement" id="lowercase">
                            <i class="fas fa-times"></i> At least one lowercase letter
                        </div>
                        <div class="requirement" id="number">
                            <i class="fas fa-times"></i> At least one number
                        </div>
                        <div class="requirement" id="special">
                            <i class="fas fa-times"></i> At least one special character
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="confirmPassword">Confirm New Password</label>
                    <input type="password" id="confirmPassword" class="form-input" required>
                    <div class="error-message" id="confirmPasswordError"></div>
                </div>

                <button type="submit" class="btn-submit" id="submitButton" disabled>Change Password</button>
            </form>
        </div>
    </div>

    <script>
        function checkAuth() {
            const token = localStorage.getItem('access_token');
            if (!token) {
                window.location.href = './login.htm';
            }
        }

        function goBack() {
            window.location.href = './profile.htm';
        }

        // Password validation rules
        const passwordRules = {
            length: password => password.length >= 8,
            uppercase: password => /[A-Z]/.test(password),
            lowercase: password => /[a-z]/.test(password),
            number: password => /[0-9]/.test(password),
            special: password => /[!@#$%^&*(),.?":{}|<>]/.test(password)
        };

        function validatePassword(password) {
            const results = {};
            let isValid = true;

            for (const [rule, testFn] of Object.entries(passwordRules)) {
                results[rule] = testFn(password);
                if (!results[rule]) isValid = false;

                const element = document.getElementById(rule);
                element.classList.toggle('valid', results[rule]);
                element.classList.toggle('invalid', !results[rule]);
                
                const icon = element.querySelector('i');
                icon.className = results[rule] ? 'fas fa-check' : 'fas fa-times';
            }

            return isValid;
        }

        function validateForm() {
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            const isNewPasswordValid = validatePassword(newPassword);
            const doPasswordsMatch = newPassword === confirmPassword;
            const isCurrentPasswordValid = currentPassword.length > 0;

            // Show/hide confirm password error
            const confirmError = document.getElementById('confirmPasswordError');
            if (confirmPassword && !doPasswordsMatch) {
                confirmError.textContent = 'Passwords do not match';
                confirmError.style.display = 'block';
            } else {
                confirmError.style.display = 'none';
            }

            // Validate new password isn't same as current
            const isSameAsOld = currentPassword === newPassword;
            const newPasswordError = document.getElementById('newPasswordError');
            if (newPassword && isSameAsOld) {
                newPasswordError.textContent = 'New password must be different from current password';
                newPasswordError.style.display = 'block';
            } else {
                newPasswordError.style.display = 'none';
            }

            // Enable/disable submit button
            const submitButton = document.getElementById('submitButton');
            submitButton.disabled = !(isNewPasswordValid && doPasswordsMatch && isCurrentPasswordValid && !isSameAsOld);

            // Add visual feedback to inputs
            const inputs = {
                currentPassword: isCurrentPasswordValid,
                newPassword: isNewPasswordValid && !isSameAsOld,
                confirmPassword: doPasswordsMatch && confirmPassword.length > 0
            };

            for (const [id, isValid] of Object.entries(inputs)) {
                const input = document.getElementById(id);
                input.classList.toggle('valid', isValid);
                input.classList.toggle('error', !isValid && input.value.length > 0);
            }
        }

        async function handleSubmit(event) {
            event.preventDefault();
            
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const userId = localStorage.getItem('user_id');

            try {
                window.spinnerService.show();
                const configResponse = await fetch('./config/config.json');
                const config = await configResponse.json();
                const token = localStorage.getItem('access_token');
                const response = await apiService.post(`${config.url}/api/v1/auth/change-password?userId=${userId}`, {
                    currentPassword,
                    newPassword
                }, {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.data.status == 200) {
                    enhancedDialog.showConfirm({
                        title: "Message",
                        message: response.data.message+". Please back to profile page!", 
                        onConfirm: () => {
                            window.location.href = './profile.htm';
                        }
                    });
                }
            } catch (error) {
                if (error.response) {
                    // console.log(error.response.data);
                    const errorMessage = error.response.data;
                    const currentPasswordError = document.getElementById('currentPasswordError');
                    currentPasswordError.textContent = errorMessage;
                    currentPasswordError.style.display = 'block';
                }
            }
            finally {
                window.spinnerService.hide();
            }
        }

        // Add event listeners for real-time validation
        document.getElementById('currentPassword').addEventListener('input', validateForm);
        document.getElementById('newPassword').addEventListener('input', validateForm);
        document.getElementById('confirmPassword').addEventListener('input', validateForm);

        document.addEventListener('DOMContentLoaded', async function(){
            checkAuth();
        } );
    </script>
</body>
</html>